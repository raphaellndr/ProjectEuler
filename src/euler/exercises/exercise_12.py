"""Exercise 12:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7-th triangle
number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21,
28, 36, 45, 55,...

What is the value of the first triangle number to have over five hundred divisors?
"""

import typer

from sympy import divisor_count

from ._registry import exercise


def highly_divisible_triangular_number(min_nb_divisors: int) -> int:
    """Returns first triangle number having over ``min_nb_divisors`` divisors.

    :param min_nb_divisors: minimum amount of divisor that the triangle number must have.
    :returns: triangle number.
    """
    nb_divisors = 0
    to_add = 1
    triangle_number = 0
    while nb_divisors <= min_nb_divisors:
        triangle_number += to_add
        nb_divisors = divisor_count(triangle_number)
        to_add += 1
    return triangle_number


@exercise(name="exercise-12")
def exercise_12(
    min_nb_divisors: int = typer.Option(500, help="Minimum number of divisors."),
) -> None:
    """Exercise 12: Value of the first triangle number to have over five hundred divisors.

    :param min_nb_divisors: minimum number of divisors.
    """
    triangle_number = highly_divisible_triangular_number(min_nb_divisors)
    print(triangle_number)


if __name__ == "__main__":
    typer.run(exercise_12)
